{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FFmpeg.py","text":"<p>FFmpeg.py is a Pythonic interface to FFmpeg, designed to simplify the construction and execution of FFmpeg commands. It allows developers and power users to build complex audio/video processing pipelines in a more readable and flexible way.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Clean, chainable API to compose FFmpeg commands</li> <li>Automatic escaping of command-line arguments</li> <li>Support for both simple and advanced filter graphs</li> <li>Easily integrated into larger video processing workflows</li> <li>Support for progress callback function</li> </ul>"},{"location":"#ffprobe-and-ffplay","title":"FFprobe and FFplay","text":"<p>Alongside <code>ffmpeg.py</code>, this toolkit may also include convenient wrappers for:</p>"},{"location":"#ffprobe","title":"<code>ffprobe</code>","text":"<p>A Python wrapper for the <code>ffprobe</code> utility to extract metadata from media files.</p>"},{"location":"#ffplay","title":"<code>ffplay</code>","text":"<p>A Python wrapper for  <code>ffplay</code> for previewing media via Python.</p>"},{"location":"getting-started/","title":"Input","text":"<p>Available classes for taking media are:</p> <ul> <li><code>InputFile</code>: For Generic Inputs</li> <li><code>VideoFile</code>: For Video</li> <li><code>ImageFile</code>: For Image</li> <li><code>AudioFile</code>: For Audio</li> <li><code>VirtualVideo</code>: For Generating Videos</li> </ul> <p>Take input using <code>InputFile</code> it provide general input interface, use <code>FileInputOptions</code> to easily set flags or directly pass in kwargs</p> <pre><code>from ffmpeg import InputFile, FileInputOptions, VideoFile\n\n# if you know flags\nclip1 = InputFile(\"video.mp4\", ss=1, t=10)\n\n# same but easy usage but limited flags\nclip = InputFile(\"video.mp4\", FileInputOptions(start_time=1, duration=10))\n\n# same with VideoFile easiest\nclip = VideoFile(\"video.mp4\").subclip(1, 10)\n\n# ['-t', '10', '-ss', '1', '-i', 'video.mp4']\n</code></pre>"},{"location":"getting-started/#filters","title":"Filters","text":"<p>Filters can be used with <code>apply</code> or <code>apply2</code>, apply2 is for multi output filters like Split and Concat.</p> <p>Usage:</p> <pre><code>clip = InputFile(\"image.png\")\nclip_scaled = apply(Scale(1000, 1000), clip)\n</code></pre>"},{"location":"getting-started/#export","title":"Export","text":"<p>FFmpeg.py comes with an easy-to-use <code>export</code> function that export the single output with multiple stream.</p> <p>combine audio and video from files and output them to a single file.</p> <p>This code extracts the video from <code>video.mp4</code> and the audio from <code>video1.mp4</code>, then exports them into a single output file <code>out.mp4</code>.</p> <pre><code>from ffmpeg.inputs import VideoFile\nfrom ffmpeg import export\n\nexport(\n    VideoFile(\"video1.mp4\").video,  # Video stream from video.mp4\n    VideoFile(\"video2.mp4\").audio,  # Audio stream from video1.mp4\n    path=\"out.mp4\",  # Output path\n).run()\n\n# ffmpeg ... -i video1.mp4 -i video2.mp4 -map 0:v -map 1:a out.mp4\n</code></pre> <p>Which is same as Using <code>FFmpeg()</code> with <code>Map</code> but in this way you can add flags per <code>Map</code> like encoding.</p> <pre><code>from ffmpeg.inputs import VideoFile\nfrom ffmpeg import FFmpeg, Map\n\nFFmpeg().output(\n    Map(VideoFile(\"video.mp4\").video),  # Map video stream from video.mp4\n    Map(VideoFile(\"video1.mp4\").audio),  # Map audio stream from video1.mp4\n    path=\"out.mp4\",  # Output path\n).run()\n# ffmpeg ... -i video.mp4 -i video1.mp4 -map 0:v -map 1:a out.mp4\n</code></pre> <p>Tip</p> <p>This method provides a more explicit control flow where each stream is mapped individually. you can provide flags for <code>-map</code> context with both stream suffixed flag or without.</p>"},{"location":"getting-started/#example","title":"Example","text":"<p>Lets make a video from a image with audio with</p> <pre><code>from ffmpeg.ffmpeg import FFmpeg\nfrom ffmpeg.inputs import FileInputOptions, InputFile\nfrom ffmpeg.models.output import Map\n\n# set options\nclip = InputFile(\n    \"image.png\",\n    FileInputOptions(loop=True, duration=5, frame_rate=60),\n)\naudio = InputFile(\n    \"audio.mp3\",\n    FileInputOptions(duration=5),\n)\n\n# run command\nffmpeg = (\n    FFmpeg().output(Map(clip), Map(audio), path=\"out.mp4\").run()\n)\n\n# ffmpeg ... -t 5 -r 60 -loop 1 -i image.png -t 5 -i audio.mp3 -map 0 -map 1 out.mp4\n</code></pre> <p>Here we are using <code>InputFile</code> it is for generic input which are support by FFmpeg like path or url in combination with <code>FileInputOptions</code> this provide useful flags that are applied to input in ffmpeg command.</p> <p>The above code is easy to understand which works like:</p> <ul> <li><code>loop=True</code> will make a infinite loop</li> <li>we set a <code>duration</code> so infinite loop can end</li> <li>then set <code>frame_rate</code> at 60</li> </ul> <p>At end we make a FFmpeg and add a output with two stream mapping. The <code>Map</code> add stream(s) to a output file in this way we can add multiple streams to one output, for more complex use case see Advance Usage like Filtering, Multiple outputs or what is progress_callback.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-library","title":"Install Library","text":"<pre><code>pip install git+https://github.com/electro199/ffmpeg.py.git\n</code></pre> <p>Note</p> <p>This project does not install ffmpeg utility automatically.</p>"},{"location":"installation/#install-ffmpeg","title":"Install FFmpeg","text":"<p>Use any of these methods:</p>"},{"location":"installation/#windows","title":"Windows","text":"<p>Using winget:</p> <pre><code>winget install --id=Gyan.FFmpeg  -e\n</code></pre> <p>Or download and install FFmpeg from official website:</p> <ol> <li>Download the latest FFmpeg build from here.</li> <li>Extract the archive and add the <code>bin</code> directory to your system <code>PATH</code>.</li> </ol>"},{"location":"installation/#linux","title":"Linux","text":"<p>Using Apt</p> <pre><code>sudo apt install ffmpeg\n</code></pre>"},{"location":"installation/#macos","title":"MacOS","text":"<p>Using Homebrew:</p> <pre><code>brew install ffmpeg\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify installation","text":"<pre><code>ffmpeg -version\n</code></pre>"},{"location":"useful_info/","title":"Useful info","text":""},{"location":"useful_info/#ffmpeg-command-structure","title":"FFMPEG command structure","text":"<p>The FFmpeg have very complex command structure the position of flags can effect the output come. The command is mainly consist of input which can be be media (file/link on internet/or any supported protocol that ffmpeg supports), then optional filter flag that tell how input should be manipulated then map flag to set which stream should be used in output either the input file and/or the modified stream the is generated after filtering</p> <p>Lets see the command structure with examples:</p> <ol> <li> <p>ffmpeg command with single input and single output simplest form</p> <ul> <li> <p>structure:</p> <pre><code>ffmpeg [options] [[infile options] -i infile]... [[outfile options] outfile]...\n</code></pre> </li> <li> <p>example with -y to overwrite the </p> <pre><code>ffmpeg -y -t 30 input_file_path.mp4  -r 24 output_file_path.mp4 \n</code></pre> </li> </ul> </li> </ol> <p>usage: ffmpeg [options][[infile options] -i infile]... [filter ]...  [-map [outfile options] outfile]...</p> <p>ffmpeg [infile options] -i infile [-map flags outfile]...</p> <p>multiple input, filter</p>"},{"location":"advance-usage/advance-usage/","title":"Advance usage","text":"<p>Lets see how everything works in FFmpeg.py</p>"},{"location":"advance-usage/advance-usage/#input","title":"Input","text":"<p>The ffmpeg takes input in <code>[-key value -i path]</code>, ffmpeg.py will make a input with <code>InputFile</code> or <code>VideoFile</code>. Both of them are does same thing but with VideoFile it comes with addition features like:</p> <ul> <li>subclip that sets <code>-ss</code> and <code>-t</code>  for seek start and duration repectively</li> <li>from_imagefile  that sets <code>-t</code>  for duration and enable <code>loop</code>.</li> <li>general streams like video, audio and subtitles that corresponds to <code>stream_name:v:n</code> in both filter and map context in command.</li> </ul> <pre><code>from ffmpeg import InputFile, FileInputOptions\n\nclip = InputFile(\"video.mp4\", FileInputOptions(duration=10, frame_rate=24))\n</code></pre> <p>It will create this command piece by running <code>clip.build_input_flags()</code>.</p> <pre><code>['-t', '10', '-r', '24', '-i', 'video.mp4']\n</code></pre>"},{"location":"advance-usage/advance-usage/#global-flags","title":"Global flags","text":"<p>Global flags are used change settings for whole runtime, you can use <code>add_global_flag</code> to set custom flags, These flags are automatic added duration command generation in <code>FFmpeg.compile()</code>:</p> <ul> <li><code>-y</code> or <code>-n</code> to set overwrite outfile </li> <li><code>-loglevel error</code> to only read errors</li> <li><code>-hide_banner</code> to avoid extra pipe writes and cleaner output.</li> </ul>"},{"location":"advance-usage/advance-usage/#usage","title":"Usage","text":"<p>The <code>add_global_flag</code> take raw flags example as: <pre><code>FFmpeg().add_global_flag(\"-recast_media\")\n\n## Results ffmpeg -recast_media -i ....\n</code></pre></p>"},{"location":"advance-usage/advance-usage/#filters","title":"Filters","text":"<p>Filters are way the ffmpeg allow media to be manipulated, ffmpeg.py use <code>apply</code> or <code>apply2</code>, apply2 is for multi output filters. Filter output can be exported or further filtered.</p>"},{"location":"advance-usage/advance-usage/#usage_1","title":"Usage","text":"<p>The <code>apply</code> functions take Filter and then the input to be filtered</p> <pre><code>apply(Filter, clip)\n</code></pre>"},{"location":"advance-usage/advance-usage/#example","title":"Example","text":"<p>Lets make a video logo overlay both scaled.</p> <pre><code>from ffmpeg import FFmpeg, Map, InputFile, VideoFile\nfrom ffmpeg.filters import apply, Scale, Overlay\n\n\nlogo = InputFile(\n    \"image.png\",\n)\n\nscaled_logo = apply(Scale(200, 200), logo)\n\nvideo = VideoFile(\n    \"video.mp4\",\n)\n\nscaled_video = apply(Scale(1920, 1080), video)\n\nfinal_video = apply(Overlay(scaled_logo, 0, 0),scaled_video)\n\n\n(\n    FFmpeg()\n    .output(Map(final_video), path=\"out.mp4\")\n    .run()\n)\n# Results \n# ffmpeg -hide_banner -y -loglevel error -i image.png -i video.mp4 \\\n# -filter_complex [0]scale=width=200:height=200[n0o0]; \\\n#                 [1]scale=width=1920:height=1080[n1o0];\\\n#                 [n1o0][n0o0]overlay=x=0:y=0[n2o0] \\\n#  -map [n2o0] out.mp4\n</code></pre>"},{"location":"advance-usage/advance-usage/#multiple-outputs","title":"Multiple Outputs","text":"<p>ffmpeg.py supports multiple output in single command by simply calling one more <code>output</code>. Lets use previous example. Here we are export the video and scaled logo</p> <pre><code>from ffmpeg import FFmpeg, Map, InputFile, VideoFile\nfrom ffmpeg.filters import apply, Scale, Overlay\n\n\nlogo = InputFile(\n    \"image.png\",\n)\n\nscaled_logo = apply(Scale(200, 200), logo)\n\nvideo = VideoFile(\n    \"video.mp4\",\n)\n\nscaled_video = apply(Scale(1920, 1080), video)\n\nfinal_video = apply(Overlay(scaled_logo, 0, 0), scaled_video)\n\n\n(\n    FFmpeg()\n    .output(Map(final_video), path=\"out.mp4\")\n    .output(Map(scaled_logo), path=\"scaled_logo.png\")\n    .run()\n)\n\n# Results \n# ffmpeg -hide_banner -y -loglevel error -i image.png -i video.mp4\n# -filter_complex [0]scale=width=200:height=200[n0o0]; \\\n#                 [1]scale=width=1920:height=1080[n1o0];\\\n#                 [n1o0][n0o0]overlay=x=0:y=0[n2o0]\\\n# -map [n2o0] out.mp4 \n# -map [n0o0] scaled_logo.png\n</code></pre>"},{"location":"advance-usage/advance-usage/#map-flags","title":"Map Flags","text":"<p>We also need to set <code>-map</code> flags when exporting like setting fps or bitrate to do that we will set them in <code>Map</code> context</p> <p>Use <code>suffix_flags</code> when a flags requires a suffix like <code>-r:1</code> or <code>-r:v:1</code> otherwise <code>kwargs</code> will catch all normal flags.</p> <pre><code>(\n    FFmpeg()\n    .output(Map(final_video,), path=\"out.mp4\")\n    .output(Map(scaled_logo), path=\"scaled_logo.png\")\n    .run()\n)\n</code></pre>"},{"location":"advance-usage/useful_info/","title":"Useful info","text":""},{"location":"advance-usage/useful_info/#ffmpeg-command-structure","title":"FFMPEG command structure","text":"<p>The FFmpeg have very complex command structure the position of flags can effect the output come. The command is mainly consist of input which can be be media (file/link on internet/or any supported protocol that ffmpeg supports), then optional filter flag that tell how input should be manipulated then map flag to set which stream should be used in output either the input file and/or the modified stream the is generated after filtering</p> <p>Lets see the command structure with examples:</p> <ol> <li> <p>ffmpeg command with single input and single output simplest form</p> <ul> <li> <p>structure:</p> <pre><code>ffmpeg [options] [[infile options] -i infile]... [[outfile options] outfile]...\n</code></pre> </li> <li> <p>example with -y to overwrite the </p> <pre><code>ffmpeg -y -t 30 input_file_path.mp4  -r 24 output_file_path.mp4 \n</code></pre> </li> </ul> </li> </ol> <p>usage: ffmpeg [options][[infile options] -i infile]... [filter ]...  [-map [outfile options] outfile]...</p> <p>ffmpeg [infile options] -i infile [-map flags outfile]...</p> <p>multiple input, filter</p>"},{"location":"api_reference/api/","title":"Api","text":""},{"location":"api_reference/api/#ffmpeg.ffmpeg","title":"ffmpeg","text":"<p>This module provides methods to build and run FFmpeg with fine control commands.</p> <p>For simple usecase use <code>export</code></p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg","title":"FFmpeg","text":"<pre><code>FFmpeg()\n</code></pre> <p>FFmpeg Command Builder</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.add_global_flag","title":"add_global_flag","text":"<pre><code>add_global_flag(*flags)\n</code></pre> <p>Adds additional FFmpeg flags</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.build_filter","title":"build_filter","text":"<pre><code>build_filter(last_node)\n</code></pre> <p>Builds the final FFmpeg chains</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.compile","title":"compile","text":"<pre><code>compile(overwrite=True)\n</code></pre> <p>Generate the command This fuction gather and combine all of the different part of the command.</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.generate_inlink_name","title":"generate_inlink_name","text":"<pre><code>generate_inlink_name(parent)\n</code></pre> <p>Get different types of links that ffmpeg uses with different types of Object</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.generate_link_name","title":"generate_link_name","text":"<pre><code>generate_link_name(i, j, stream_char='')\n</code></pre> <p>make names for link names</p> <p>Note: stream_char should not be use in outlink name generation</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.handle_input_export","title":"handle_input_export","text":"<pre><code>handle_input_export(node)\n</code></pre> <p>Check if Output is Input without any filter applied</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.output","title":"output","text":"<pre><code>output(*maps, path, **kvflags)\n</code></pre> <p>Create output for the command with map and output specific flags and the path for the output</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.reset","title":"reset","text":"<pre><code>reset()\n</code></pre> <p>Reset all compilation data added</p>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.FFmpeg.run","title":"run","text":"<pre><code>run(progress_callback=None, progress_period=0.5, overwrite=True)\n</code></pre> <p>Run the FFmpeg command.</p> <p>Parameters:</p> Name Type Description Default <code>progress_callback</code> <code>Optional[Callable[[dict], None]]</code> <p>Function that can be used to track progress of the process running data can be mix of None and actual values</p> <code>None</code> <code>progress_period</code> <code>float</code> <p>Set period at which progress_callback is called</p> <code>0.5</code> <code>overwrite</code> <code>bool</code> <p>overwrite the output if already exists</p> <code>True</code>"},{"location":"api_reference/api/#ffmpeg.ffmpeg.export","title":"export","text":"<pre><code>export(*nodes, path)\n</code></pre> <p>Exports a clip by processing the given input nodes and saving the output to the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>nodes</code> <code>BaseInput | StreamSpecifier</code> <p>One or more input nodes representing media sources.</p> <code>()</code> <code>path</code> <code>str</code> <p>The output file path where the exported clip will be saved.</p> required <p>Returns:</p> Name Type Description <code>FFmpeg</code> <code>FFmpeg</code> <p>An FFmpeg instance configured with the given inputs and output path.</p>"},{"location":"api_reference/api/#ffmpeg.filters","title":"filters","text":""},{"location":"api_reference/api/#ffmpeg.filters.BaseFilter","title":"BaseFilter","text":"<pre><code>BaseFilter(filter_name)\n</code></pre> <p>Base class for all FFmpeg filters.</p>"},{"location":"api_reference/api/#ffmpeg.filters.Concat","title":"Concat","text":"<pre><code>Concat(nodes)\n</code></pre> <p>               Bases: <code>BaseFilter</code></p> <p>Represents an overlay filter that combines streams.</p>"},{"location":"api_reference/api/#ffmpeg.filters.Overlay","title":"Overlay","text":"<pre><code>Overlay(overlay_input, x, y)\n</code></pre> <p>               Bases: <code>BaseFilter</code>, <code>TimelineEditingMixin</code></p> <p>Represents an overlay filter that combines two video streams.</p>"},{"location":"api_reference/api/#ffmpeg.filters.Overlay.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/api/#ffmpeg.filters.Overlay.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/api/#ffmpeg.filters.Overlay.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/api/#ffmpeg.filters.TimelineEditingMixin","title":"TimelineEditingMixin","text":"<p>Mixin providing timeline-based activation control for FFmpeg filter graphs.</p> <p>This mixin allows enabling filters conditionally based on the video timestamp, using FFmpeg's <code>enable</code> expression mechanism with <code>between</code>, <code>gte</code>, and <code>lte</code>.</p> <p>Attributes:</p> Name Type Description <code>flags</code> <code>dict</code> <p>Dictionary storing FFmpeg filter options, such as enable expressions.</p>"},{"location":"api_reference/api/#ffmpeg.filters.TimelineEditingMixin.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/api/#ffmpeg.filters.TimelineEditingMixin.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/api/#ffmpeg.filters.TimelineEditingMixin.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/api/#ffmpeg.filters.XFade","title":"XFade","text":"<pre><code>XFade(name, offset=0, duration=1, expression=None)\n</code></pre> <p>               Bases: <code>BaseFilter</code></p> <p>Combine two videos with transition.</p> Note <p>Requires same size and fps and aspect ratio.</p>"},{"location":"api_reference/api/#ffmpeg.filters.apply","title":"apply","text":"<pre><code>apply(node, *parent)\n</code></pre> <p>Apply a filter input streams.</p> <p>This function connects the given input nodes (either BaseInput or StreamSpecifier) to a filter node and returns a single output stream from the filter.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>BaseFilter</code> <p>The filter node to apply.</p> required <code>*parent</code> <code>BaseInput | StreamSpecifier</code> <p>Input nodes to connect to the filter.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>StreamSpecifier</code> <code>StreamSpecifier</code> <p>The resulting single output stream from the filter.</p>"},{"location":"api_reference/api/#ffmpeg.filters.apply2","title":"apply2","text":"<pre><code>apply2(node, *parent)\n</code></pre> <p>Apply a filter input streams.</p> <p>This function connects the given input nodes (either BaseInput or StreamSpecifier) to a filter node and returns a list of all output streams from the filter.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>BaseFilter</code> <p>The filter node to apply.</p> required <code>*parent</code> <code>BaseInput | StreamSpecifier</code> <p>Input nodes to connect to the filter.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[StreamSpecifier]</code> <p>list[StreamSpecifier]: A list of output streams from the filter.</p>"},{"location":"api_reference/api/#ffmpeg.utils","title":"utils","text":""},{"location":"api_reference/api/#ffmpeg.utils.build_flags","title":"build_flags","text":"<pre><code>build_flags(kwflags)\n</code></pre> <p>Generate flags</p>"},{"location":"api_reference/api/#ffmpeg.utils.parse_value","title":"parse_value","text":"<pre><code>parse_value(value)\n</code></pre> <p>Convert FFmpeg progress values to appropriate data types.</p>"},{"location":"api_reference/api/#ffmpeg.exception","title":"exception","text":""},{"location":"api_reference/api/#ffmpeg.exception.FFmpegException","title":"FFmpegException","text":"<pre><code>FFmpegException(msg, return_code)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Exception raised when an FFmpeg command fails.</p> <p>Attributes:</p> Name Type Description <code>msg</code> <code>str</code> <p>The error message returned by FFmpeg.</p> <code>return_code</code> <code>int</code> <p>The process return code from FFmpeg.</p> <p>Initialize FFmpegException.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Error message from FFmpeg.</p> required <code>return_code</code> <code>int</code> <p>Return code from FFmpeg process.</p> required"},{"location":"api_reference/api/#ffmpeg.exception.FFprobeException","title":"FFprobeException","text":"<pre><code>FFprobeException(msg, return_code)\n</code></pre> <p>               Bases: <code>FFmpegException</code></p> <p>Exception raised when an FFprobe command fails.</p> <p>Inherits from FFmpegException and is specific to FFprobe failures.</p> <p>Attributes:</p> Name Type Description <code>msg</code> <code>str</code> <p>The error message returned by FFprobe.</p> <code>return_code</code> <code>int</code> <p>The process return code from FFprobe.</p> <p>Initialize FFprobeException.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Error message from FFprobe.</p> required <code>return_code</code> <code>int</code> <p>Return code from FFprobe process.</p> required"},{"location":"api_reference/api/#ffmpeg.ffplay","title":"ffplay","text":"<p>Use FFplay through easy to use function</p>"},{"location":"api_reference/api/#ffmpeg.ffplay.ffplay","title":"ffplay","text":""},{"location":"api_reference/api/#ffmpeg.ffplay.ffplay.ffplay","title":"ffplay","text":"<pre><code>ffplay(file_path, width=None, height=None, fullscreen=False, disable_audio=False, disable_video=False, disable_subtitles=False, seek_position=None, duration=None, seek_by_bytes=False, seek_interval=None, nodisp=False, noborder=False, alwaysontop=False, volume=None, force_format=None, window_title=None, left=None, top=None, loop=None, showmode=None, video_filter=None, audio_filter=None, autoexit=False, fbuf=False, sync=None, fast=False, stats=False, drp=False, fflags=None, vf=None, af=None, framedrop=False)\n</code></pre> <p>Run ffplay to play the specified media file with customizable options.</p>"},{"location":"api_reference/api/#ffmpeg.ffprobe","title":"ffprobe","text":"<p>Use FFprobe through easy to use function or use flags to get specific data</p>"},{"location":"api_reference/api/#ffmpeg.ffprobe.ffprobe","title":"ffprobe","text":""},{"location":"api_reference/api/#ffmpeg.ffprobe.ffprobe.ffprobe","title":"ffprobe","text":"<pre><code>ffprobe(file_path, options=None)\n</code></pre> <p>Run ffprobe with the given options on the specified file. :param file_path: Path to the media file. :param options: set ffprobe options (default extracts streams and format). :return: Parsed JSON output or None if an error occurs.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math","title":"math","text":"<p>Variety of math and logic fuctions for ffmpeg evaluation during runtime.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_abs","title":"f_abs","text":"<pre><code>f_abs(x)\n</code></pre> <p>Compute absolute value of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_acos","title":"f_acos","text":"<pre><code>f_acos(x)\n</code></pre> <p>Compute arccosine of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_asin","title":"f_asin","text":"<pre><code>f_asin(x)\n</code></pre> <p>Compute arcsine of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_atan","title":"f_atan","text":"<pre><code>f_atan(x)\n</code></pre> <p>Compute arctangent of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_atan2","title":"f_atan2","text":"<pre><code>f_atan2(y, x)\n</code></pre> <p>Compute principal value of the arc tangent of y/x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_between","title":"f_between","text":"<pre><code>f_between(x, min, max)\n</code></pre> <p>Return 1 if x is greater than or equal to min and lesser than or equal to max, 0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_bitand","title":"f_bitand","text":"<pre><code>f_bitand(x, y)\n</code></pre> <p>Compute bitwise and/or operation on x and y.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_bitor","title":"f_bitor","text":"<pre><code>f_bitor(x, y)\n</code></pre> <p>The results of the evaluation of x and y are converted to integers before executing the bitwise operation. Note that both the conversion to integer and the conversion back to floating point can lose precision. Beware of unexpected results for large numbers (usually 2^53 and larger).</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_ceil","title":"f_ceil","text":"<pre><code>f_ceil(expr)\n</code></pre> <p>Round the value of expression expr upwards to the nearest integer. For example, \"ceil(1.5)\" is \"2.0\".</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_clip","title":"f_clip","text":"<pre><code>f_clip(x, min, max)\n</code></pre> <p>Return the value of x clipped between min and max.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_cos","title":"f_cos","text":"<pre><code>f_cos(x)\n</code></pre> <p>Compute cosine of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_cosh","title":"f_cosh","text":"<pre><code>f_cosh(x)\n</code></pre> <p>Compute hyperbolic cosine of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_eq","title":"f_eq","text":"<pre><code>f_eq(x, y)\n</code></pre> <p>Return 1 if x and y are equivalent, 0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_exp","title":"f_exp","text":"<pre><code>f_exp(x)\n</code></pre> <p>Compute exponential of x (with base e, the Euler\u2019s number).</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_floor","title":"f_floor","text":"<pre><code>f_floor(expr)\n</code></pre> <p>Round the value of expression expr downwards to the nearest integer. For example, \"floor(-1.5)\" is \"-2.0\".</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_gauss","title":"f_gauss","text":"<pre><code>f_gauss(x)\n</code></pre> <p>Compute Gauss function of x, corresponding to exp(-xx/2) / sqrt(2PI).</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_gcd","title":"f_gcd","text":"<pre><code>f_gcd(x, y)\n</code></pre> <p>Return f_the greatest common divisor of x and y. If both x and y are 0 or either or both are less than zero then behavior is undefined.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_gt","title":"f_gt","text":"<pre><code>f_gt(x, y)\n</code></pre> <p>Return 1 if x is greater than y, 0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_gte","title":"f_gte","text":"<pre><code>f_gte(x, y)\n</code></pre> <p>Return 1 if x is greater than or equal to y, 0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_hypot","title":"f_hypot","text":"<pre><code>f_hypot(x, y)\n</code></pre> <p>This function is similar to the C function with the same name; it returns \"sqrt(xx + yy)\", the length of the hypotenuse of a right triangle with sides of length x and y, or the distance of the point (x, y) from the origin.:</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_if","title":"f_if","text":"<pre><code>f_if(x, y, z)\n</code></pre> <p>Evaluate x, and if the result is non-zero return the evaluation result of y, otherwise the evaluation result of z.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_ifnot","title":"f_ifnot","text":"<pre><code>f_ifnot(x, y, z)\n</code></pre> <p>Evaluate x, and if the result is zero return the evaluation result of y, otherwise the evaluation result of z.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_isinf","title":"f_isinf","text":"<pre><code>f_isinf(x)\n</code></pre> <p>Return 1.0 if x is +/-INFINITY, 0.0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_isnan","title":"f_isnan","text":"<pre><code>f_isnan(x)\n</code></pre> <p>Return 1.0 if x is NAN, 0.0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_ld","title":"f_ld","text":"<pre><code>f_ld(idx)\n</code></pre> <p>Load the value of the internal variable with index idx, which was previously stored with st(idx, expr). The function returns the loaded value.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_lerp","title":"f_lerp","text":"<pre><code>f_lerp(x, y, z)\n</code></pre> <p>Return linear interpolation between x and y by amount of z.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_log","title":"f_log","text":"<pre><code>f_log(x)\n</code></pre> <p>Compute natural logarithm of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_lt","title":"f_lt","text":"<pre><code>f_lt(x, y)\n</code></pre> <p>Return 1 if x is lesser than y, 0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_lte","title":"f_lte","text":"<pre><code>f_lte(x, y)\n</code></pre> <p>Return 1 if x is lesser than or equal to y, 0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_max","title":"f_max","text":"<pre><code>f_max(x, y)\n</code></pre> <p>Return the maximum between x and y.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_min","title":"f_min","text":"<pre><code>f_min(x, y)\n</code></pre> <p>Return the minimum between x and y.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_mod","title":"f_mod","text":"<pre><code>f_mod(x, y)\n</code></pre> <p>Compute the remainder of division of x by y.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_not","title":"f_not","text":"<pre><code>f_not(expr)\n</code></pre> <p>Return 1.0 if expr is zero, 0.0 otherwise.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_pow","title":"f_pow","text":"<pre><code>f_pow(x, y)\n</code></pre> <p>Compute the power of x elevated y, it is equivalent to \"(x)^(y)\".</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_print","title":"f_print","text":"<pre><code>f_print(t, l)\n</code></pre> <p>Pf_rint the value of expression t with loglevel l. If l is not specified then a default log level is used. Return the value of the expression printed.:</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_random","title":"f_random","text":"<pre><code>f_random(idx)\n</code></pre> <p>Return a pseudo random value between 0.0 and 1.0. idx is the index of the internal variable used to save the seed/state, which can be previously stored with st(idx). To initialize the seed, you need to store the seed value as a 64-bit unsigned integer in the internal variable with index idx. For example, to store the seed with value 42 in the internal variable with index 0 and print a few random values:</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_randomi","title":"f_randomi","text":"<pre><code>f_randomi(idx, min, max)\n</code></pre> <p>Return a pseudo random value in the interval between min and max. idx is the index of the internal variable which will be used to save the seed/state, which can be previously stored with st(idx). To initialize the seed, you need to store the seed value as a 64-bit unsigned integer in the internal variable with index idx.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_root","title":"f_root","text":"<pre><code>f_root(expr, max)\n</code></pre> <p>Find an input value for which the function represented by expr with argument ld(0) is 0 in the interval 0..max.</p> <p>The expression in expr must denote a continuous function or the result is undefif_ned. ld(0) is used to represent the function input value, which means that the given expression will be evaluated multiple times with various input values that the expression can access through ld(0). When the expression evaluates to 0 then the corresponding input value will be returned.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_round","title":"f_round","text":"<pre><code>f_round(expr)\n</code></pre> <p>Round the value of expression expr to the nearest integer. For example, \"round(1.5)\" is \"2.0\".</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_sgn","title":"f_sgn","text":"<pre><code>f_sgn(x)\n</code></pre> <p>Compute sign of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_sin","title":"f_sin","text":"<pre><code>f_sin(x)\n</code></pre> <p>Compute sine of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_sinh","title":"f_sinh","text":"<pre><code>f_sinh(x)\n</code></pre> <p>Compute hyperbolic sine of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_sqrt","title":"f_sqrt","text":"<pre><code>f_sqrt(expr)\n</code></pre> <p>Compute the square root of expr. This is equivalent to <code>(expr)^.5</code></p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_squish","title":"f_squish","text":"<pre><code>f_squish(x)\n</code></pre> <p>Compute expression 1/(1 + exp(4*x)).</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_st","title":"f_st","text":"<pre><code>f_st(idx, expr)\n</code></pre> <p>Store the value of the expression expr in an internal variable. idx specifies the index of the variable where to store the value, and it is a value ranging from 0 to 9. The function returns the value stored in the internal variable.</p> <p>The stored value can be retrieved with ld(var).</p> <p>Note: variables are currently not shared between expressions.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_tan","title":"f_tan","text":"<pre><code>f_tan(x)\n</code></pre> <p>Compute tangent of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_tanh","title":"f_tanh","text":"<pre><code>f_tanh(x)\n</code></pre> <p>Compute hyperbolic tangent of x.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_taylor","title":"f_taylor","text":"<pre><code>f_taylor(expr, x, idx)\n</code></pre> <p>Evaluate a Taylor series at x, given an expression representing the ld(idx)-th derivative of a function at 0.</p> <p>When the series does not converge the result is undefined.</p> <p>ld(idx) is used to represent the derivative order in expr, which means that the given expression will be evaluated multiple times with various input values that the expression can access through ld(idx). If idx is not specified then 0 is assumed.</p> <p>Note, when you have the derivatives at y instead of 0, taylor(expr, x-y) can be used.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_time","title":"f_time","text":"<pre><code>f_time()\n</code></pre> <p>Return the current (wallclock) time in seconds.</p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_trunc","title":"f_trunc","text":"<pre><code>f_trunc(expr)\n</code></pre> <p>Round the value of expression expr towards zero to the nearest integer. For example, <code>trunc(-1.5)</code> is <code>-1.0</code></p>"},{"location":"api_reference/api/#ffmpeg.expressions.math.f_while","title":"f_while","text":"<pre><code>f_while(cond, expr)\n</code></pre> <p>Evaluate expression expr while the expression cond is non-zero, and returns the value of the last expr evaluation, or NAN if cond was always false. The following constants are available:</p>"},{"location":"api_reference/filters/","title":"Filters","text":""},{"location":"api_reference/filters/#ffmpeg.filters.apply","title":"apply","text":"<pre><code>apply(node, *parent)\n</code></pre> <p>Apply a filter input streams.</p> <p>This function connects the given input nodes (either BaseInput or StreamSpecifier) to a filter node and returns a single output stream from the filter.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>BaseFilter</code> <p>The filter node to apply.</p> required <code>*parent</code> <code>BaseInput | StreamSpecifier</code> <p>Input nodes to connect to the filter.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>StreamSpecifier</code> <code>StreamSpecifier</code> <p>The resulting single output stream from the filter.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.apply2","title":"apply2","text":"<pre><code>apply2(node, *parent)\n</code></pre> <p>Apply a filter input streams.</p> <p>This function connects the given input nodes (either BaseInput or StreamSpecifier) to a filter node and returns a list of all output streams from the filter.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>BaseFilter</code> <p>The filter node to apply.</p> required <code>*parent</code> <code>BaseInput | StreamSpecifier</code> <p>Input nodes to connect to the filter.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[StreamSpecifier]</code> <p>list[StreamSpecifier]: A list of output streams from the filter.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Text","title":"Text","text":"<pre><code>Text(text, y, x, fontsize=16, color='white', fontname='arial.ttf', **kwargs)\n</code></pre> <p>               Bases: <code>BaseFilter</code>, <code>TimelineEditingMixin</code></p>"},{"location":"api_reference/filters/#ffmpeg.filters.Text.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Text.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Text.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Box","title":"Box","text":"<pre><code>Box(x, y, width, height, color='red', t=5, replace=False)\n</code></pre> <p>               Bases: <code>BaseFilter</code>, <code>TimelineEditingMixin</code></p>"},{"location":"api_reference/filters/#ffmpeg.filters.Box.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Box.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Box.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Split","title":"Split","text":"<pre><code>Split(n)\n</code></pre> <p>               Bases: <code>BaseFilter</code></p>"},{"location":"api_reference/filters/#ffmpeg.filters.XFade","title":"XFade","text":"<pre><code>XFade(name, offset=0, duration=1, expression=None)\n</code></pre> <p>               Bases: <code>BaseFilter</code></p> <p>Combine two videos with transition.</p> Note <p>Requires same size and fps and aspect ratio.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Overlay","title":"Overlay","text":"<pre><code>Overlay(overlay_input, x, y)\n</code></pre> <p>               Bases: <code>BaseFilter</code>, <code>TimelineEditingMixin</code></p> <p>Represents an overlay filter that combines two video streams.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Overlay.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Overlay.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Overlay.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Concat","title":"Concat","text":"<pre><code>Concat(nodes)\n</code></pre> <p>               Bases: <code>BaseFilter</code></p> <p>Represents an overlay filter that combines streams.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.Scale","title":"Scale","text":"<pre><code>Scale(width, height, **kwargs)\n</code></pre> <p>               Bases: <code>BaseFilter</code></p>"},{"location":"api_reference/filters/#ffmpeg.filters.SetTimeBase","title":"SetTimeBase","text":"<pre><code>SetTimeBase(expression='AVTB')\n</code></pre> <p>               Bases: <code>BaseFilter</code>, <code>TimelineEditingMixin</code></p>"},{"location":"api_reference/filters/#ffmpeg.filters.SetTimeBase.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.SetTimeBase.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.SetTimeBase.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.SetSampleAspectRatio","title":"SetSampleAspectRatio","text":"<pre><code>SetSampleAspectRatio(expression='1')\n</code></pre> <p>               Bases: <code>BaseFilter</code></p>"},{"location":"api_reference/filters/#ffmpeg.filters.TimelineEditingMixin","title":"TimelineEditingMixin","text":"<p>Mixin providing timeline-based activation control for FFmpeg filter graphs.</p> <p>This mixin allows enabling filters conditionally based on the video timestamp, using FFmpeg's <code>enable</code> expression mechanism with <code>between</code>, <code>gte</code>, and <code>lte</code>.</p> <p>Attributes:</p> Name Type Description <code>flags</code> <code>dict</code> <p>Dictionary storing FFmpeg filter options, such as enable expressions.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.TimelineEditingMixin.enable_after","title":"enable_after","text":"<pre><code>enable_after(t)\n</code></pre> <p>Enable the filter only after the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) after which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.TimelineEditingMixin.enable_before","title":"enable_before","text":"<pre><code>enable_before(t)\n</code></pre> <p>Enable the filter only before the given timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>t</code> <code>float</code> <p>Time (in seconds) before which the filter is enabled.</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.TimelineEditingMixin.enable_between","title":"enable_between","text":"<pre><code>enable_between(start, end)\n</code></pre> <p>Enable the filter only between the given start and end times.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>Start time (in seconds).</p> required <code>end</code> <code>float</code> <p>End time (in seconds).</p> required <p>Returns:</p> Name Type Description <code>TimelineEditingMixin</code> <p>The current instance with the updated <code>enable</code> flag.</p>"},{"location":"api_reference/filters/#ffmpeg.filters.BaseFilter","title":"BaseFilter","text":"<pre><code>BaseFilter(filter_name)\n</code></pre> <p>Base class for all FFmpeg filters.</p>"},{"location":"api_reference/inputs/","title":"Inputs","text":""},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile","title":"VideoFile","text":"<pre><code>VideoFile(filepath)\n</code></pre> <p>               Bases: <code>BaseInput</code></p> <p>A class representing a video file that can be processed with FFmpeg.</p> <p>This class provides methods for interacting with a video file, such as building FFmpeg input flags, extracting streams (audio, video, subtitles), creating subclips, and retrieving the video file's resolution.</p> <p>Initializes the VideoFile object with the specified file path.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the video file to be processed.</p> required"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.audio","title":"audio  <code>property</code>","text":"<pre><code>audio\n</code></pre> <p>Access the audio stream of the video file.</p> <p>Returns:</p> Name Type Description <code>StreamSpecifier</code> <code>StreamSpecifier</code> <p>A StreamSpecifier object for the audio stream.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.subtitle","title":"subtitle  <code>property</code>","text":"<pre><code>subtitle\n</code></pre> <p>Access the subtitle stream of the video file.</p> <p>Returns:</p> Name Type Description <code>StreamSpecifier</code> <code>StreamSpecifier</code> <p>A StreamSpecifier object for the subtitle stream.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.video","title":"video  <code>property</code>","text":"<pre><code>video\n</code></pre> <p>Access the video stream of the video file.</p> <p>Returns:</p> Type Description <code>StreamSpecifier</code> <p>StreamSpecifier</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index)\n</code></pre> <p>Get stream from video by index</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.build_input_flags","title":"build_input_flags","text":"<pre><code>build_input_flags()\n</code></pre> <p>Builds the FFmpeg input flags for the video file.</p> <p>This method constructs the FFmpeg command line input flags to specify the video file to be processed.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of input flags for FFmpeg, including the file path.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.from_imagefile","title":"from_imagefile  <code>classmethod</code>","text":"<pre><code>from_imagefile(imgpath, duration, fps)\n</code></pre> <p>Creates a VideoFile object from an image file, looping it for the given duration and setting the frame rate.</p> <p>Parameters:</p> Name Type Description Default <code>imgpath</code> <code>str</code> <p>The path to the image file to use as a video.</p> required <code>duration</code> <code>float</code> <p>The duration of the video in seconds.</p> required <code>fps</code> <code>int</code> <p>The frame rate of the video.</p> required <p>Returns:</p> Name Type Description <code>VideoFile</code> <code>VideoFile</code> <p>A VideoFile object created from the image file.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.get_size","title":"get_size","text":"<pre><code>get_size()\n</code></pre> <p>Retrieves the resolution (width and height) of the video file.</p> <p>Uses FFprobe to extract the width and height of the first video stream in the video file.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>tuple[int, int]: A tuple containing the width and height of the video.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.get_stream","title":"get_stream","text":"<pre><code>get_stream(stream_index, stream_name=None)\n</code></pre> <p>Get a specific stream from the video file by index and/or stream name.</p> Note <p>This function will not validate if stream exists.</p> Example <p>You get 2nd audio stream from video like this. <pre><code>clip.get_stream(stream_index=1,stream_name=\"a\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>stream_index</code> <code>int</code> <p>The index of the stream (e.g., 0 for the first stream).</p> required <code>stream_name</code> <code>Optional[Literal['a', 'v', 's', 'd', 't', 'V']]</code> <p>The name of the stream to retrieve - <code>a</code> -&gt; audio - <code>v</code> -&gt; video - <code>s</code> -&gt; subtitles - <code>d</code> -&gt; data - <code>t</code> -&gt; attachments - <code>V</code> -&gt; video but excludes thumbnails/attached pics If not provided, retrieves the stream by index.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>StreamSpecifier</code> <code>StreamSpecifier</code> <p>A StreamSpecifier object for the requested stream.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VideoFile.subclip","title":"subclip","text":"<pre><code>subclip(start, end)\n</code></pre> <p>Defines a subclip from the video file by setting the start and end times. This will not make a new copy until exported.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The start time of the subclip in seconds.</p> required <code>end</code> <code>float</code> <p>The end time of the subclip in seconds.</p> required <p>Returns:</p> Name Type Description <code>VideoFile</code> <code>VideoFile</code> <p>The updated VideoFile object with the subclip flags set.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.ImageFile","title":"ImageFile","text":"<pre><code>ImageFile(filepath)\n</code></pre> <p>               Bases: <code>BaseInput</code></p> <p>A class representing a Image file that can be processed with FFmpeg.</p> <p>This class provides methods for interacting with a Image file, such as building FFmpeg input flags</p> <p>Initializes the ImageFile object with the specified file path.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the image file to be processed.</p> required"},{"location":"api_reference/inputs/#ffmpeg.inputs.ImageFile.build_input_flags","title":"build_input_flags","text":"<pre><code>build_input_flags()\n</code></pre> <p>Builds the FFmpeg input flags for the video file.</p> <p>This method constructs the FFmpeg command line input flags to specify the video file to be processed.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of input flags for FFmpeg, including the file path.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.ImageFile.get_size","title":"get_size","text":"<pre><code>get_size()\n</code></pre> <p>Retrieves the resolution (width and height) of the image file.</p> <p>Uses FFprobe to extract the width and height of the first image stream in the image file.</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>tuple[int, int]: A tuple containing the width and height of the image.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.AudioFile","title":"AudioFile","text":"<pre><code>AudioFile(filepath)\n</code></pre> <p>               Bases: <code>BaseInput</code></p> <p>A class representing a Audio file that can be processed with FFmpeg.</p> <p>This class provides methods for interacting with a Audio file, such as building FFmpeg input flags</p> <p>Initializes the AudioFile object with the specified file path.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the audio file to be processed.</p> required"},{"location":"api_reference/inputs/#ffmpeg.inputs.AudioFile.build_input_flags","title":"build_input_flags","text":"<pre><code>build_input_flags()\n</code></pre> <p>Builds the FFmpeg input flags for the video file.</p> <p>This method constructs the FFmpeg command line input flags to specify the video file to be processed.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of input flags for FFmpeg, including the file path.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.AudioFile.get_duration","title":"get_duration","text":"<pre><code>get_duration()\n</code></pre> <p>Retrieves the duration of the audio file.</p> <p>Uses FFprobe to extract the width and height of the first audio stream in the audio file.</p> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>duration in seconds.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.AudioFile.probe","title":"probe","text":"<pre><code>probe()\n</code></pre> <p>Retrieves the duration of the audio file.</p> <p>Uses FFprobe to extract the stats of the in the audio file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>with all data from ffprobe.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.AudioFile.subclip","title":"subclip","text":"<pre><code>subclip(start, end)\n</code></pre> <p>Defines a subclip from the Audio file by setting the start and end times. This will not make a new copy until exported.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>The start time of the subclip in seconds.</p> required <code>end</code> <code>float</code> <p>The end time of the subclip in seconds.</p> required <p>Returns:</p> Name Type Description <code>AudioFile</code> <code>AudioFile</code> <p>The updated AudioFile object with the subclip flags set.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.InputFile","title":"InputFile","text":"<pre><code>InputFile(filepath, options=None, **kwargs)\n</code></pre> <p>               Bases: <code>BaseInput</code></p> <p>General Input for FFMPEG backend You can use custom flags</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo","title":"VirtualVideo","text":"<pre><code>VirtualVideo(name, format='lavfi', flags=None, **kwargs)\n</code></pre> <p>               Bases: <code>BaseVirtualInput</code></p> <p>ssdsad</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.build_input_flags","title":"build_input_flags","text":"<pre><code>build_input_flags()\n</code></pre> <p>Builds the FFmpeg input flags for the video file.</p> <p>This method constructs the FFmpeg command line input flags to specify the video file to be processed.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of input flags for FFmpeg, including the file path.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.from_cellauto","title":"from_cellauto  <code>classmethod</code>","text":"<pre><code>from_cellauto(width, height, pattern=None, rate=None, random_fill_ratio=None, random_seed=None, rule=None, scroll=None, start_full=None, stitch=None)\n</code></pre> <p>Create a pattern generated by an elementary cellular automaton. The initial state of the cellular automaton can be defined through the filename and pattern options. If such options are not specified an initial state is created randomly. At each new frame a new row in the video is filled with the result of the cellular automaton next generation. The behavior when the whole frame is filled is defined by the scroll option.</p> <p>https://ffmpeg.org/ffmpeg-filters.html#cellauto</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.from_ddagrab","title":"from_ddagrab  <code>classmethod</code>","text":"<pre><code>from_ddagrab(output_idx, draw_mouse=None, framerate=None, rate=25, sar=None, preset=None, seed=None)\n</code></pre> <pre><code>output_idx        &lt;int&gt;        ..FV....... dda output index to capture (from 0 to INT_MAX) (default 0)\n</code></pre> <p>draw_mouse            ..FV....... draw the mouse pointer (default true) framerate          ..FV....... set video frame rate (default \"30\") video_size         ..FV....... set video frame size offset_x                  ..FV....... capture area x offset (from INT_MIN to INT_MAX) (default 0) offset_y                  ..FV....... capture area y offset (from INT_MIN to INT_MAX) (default 0) output_fmt                ..FV....... desired output format (from 0 to INT_MAX) (default 8bit)     auto            0            ..FV....... let dda pick its preferred format     8bit            87           ..FV....... only output default 8 Bit format     bgra            87           ..FV....... only output 8 Bit BGRA     10bit           24           ..FV....... only output default 10 Bit format     x2bgr10         24           ..FV....... only output 10 Bit X2BGR10     16bit           10           ..FV....... only output default 16 Bit format     rgbaf16         10           ..FV....... only output 16 Bit RGBAF16 allow_fallback        ..FV....... don't error on fallback to default 8 Bit format (default false) force_fmt             ..FV....... exclude BGRA from format list (experimental, discouraged by Microsoft) (default false)"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.from_gradients","title":"from_gradients  <code>classmethod</code>","text":"<pre><code>from_gradients(height, width, duration=None, rate=None, c0=None, c1=None, c2=None, c3=None, c4=None, c5=None, c6=None, c7=None, x0=None, y0=None, x1=None, y1=None, nb_colors=None, seed=None, speed=None, type=None)\n</code></pre> <p>Generate several animated gradients.</p> <p>https://ffmpeg.org/ffmpeg-filters.html#gradients</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.from_mandelbrot","title":"from_mandelbrot  <code>classmethod</code>","text":"<pre><code>from_mandelbrot(width=640, height=480, rate=None, end_pts=None, end_scale=None, inner=None, bailout=None, maxiter=None, outer=None, start_scale=None, start_x=None, start_y=None)\n</code></pre> <p>Generate a Mandelbrot set fractal with zoom animation.</p> <p>https://ffmpeg.org/ffmpeg-filters.html#mandelbrot</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.from_testsrc","title":"from_testsrc  <code>classmethod</code>","text":"<pre><code>from_testsrc(width, height, duration=None, rate=25, sar=None, decimals=None)\n</code></pre> <p>size : set video size (default \"320x240\") rate : set video rate (default \"25\") duration : set video duration (default -0.000001) sar : set video sample aspect ratio (from 0 to INT_MAX) (default 1/1) decimals : set number of decimals to show (from 0 to 17) (default 0)</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.VirtualVideo.get_size","title":"get_size","text":"<pre><code>get_size()\n</code></pre> <p>Retrieves the resolution (width and height).</p> <p>Returns:</p> Type Description <code>tuple[int, int]</code> <p>tuple[int, int]: A tuple containing the width and height of the video.</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.FileInputOptions","title":"FileInputOptions","text":"<pre><code>FileInputOptions(duration=None, start_time=None, format=None, codec=None, frame_rate=None, video_size=None, pixel_format=None, sample_rate=None, audio_channels=None, thread_queue_size=None, itsoffset=None, itsoverride=None, analyzeduration=None, probesize=None, rtbufsize=None, re=None, accurate_seek=None, discard=None, vsync=None, async_audio=None, fps_mode=None, loop=None)\n</code></pre> <p>               Bases: <code>BaseOptions</code></p> <p>Represents input options for FFmpeg's <code>-i</code> flag.</p> <p>This class allows users to specify various input-related parameters for FFmpeg command generation.</p> Note <p>The types for flags like <code>duration</code> are int but ffmpeg can accept multiple formats. see ffmpeg</p> <p>Example usage: <pre><code>options = InputOptions(duration=10, start_time=\"00:00:05\", format=\"mp4\", frame_rate=30)\n</code></pre></p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.FileInputOptions.add_flags","title":"add_flags","text":"<pre><code>add_flags(key, value)\n</code></pre> <p>Add other FFMPEG flags</p>"},{"location":"api_reference/inputs/#ffmpeg.inputs.StreamSpecifier","title":"StreamSpecifier","text":"<pre><code>StreamSpecifier(parent, output_index=0, stream_index=None, stream_name=None, codec_type=None, metadata=None)\n</code></pre> <p>Used specify in ffmpeg command</p> <p>ffmpeg docs : https://ffmpeg.org/ffmpeg.html#toc-Automatic-stream-selection</p>"}]}